package docs

import (
	"fmt"
	"os"
	"path"

	"github.com/nyaruka/goflow/i18n"
	"github.com/nyaruka/goflow/utils/dates"

	"github.com/pkg/errors"
)

const (
	// documentation extracted from the source code is in this language
	srcLanguage = "en_US"
	poDomain    = "flows"
)

// Generator generates a documentation output
type Generator interface {
	Name() string

	// ExtractText returns strings that can be translated
	ExtractText(items map[string][]*TaggedItem) []string

	// Generate does the actual generation in the given language
	Generate(baseDir, outputDir string, items map[string][]*TaggedItem, po *i18n.PO) error
}

var generators []Generator

// RegisterGenerator registers a documentation generator
func RegisterGenerator(g Generator) {
	generators = append(generators, g)
}

// ExtractPOT extracts a PO template of translatable strings from the tagged items
func ExtractPOT(items map[string][]*TaggedItem, srcLanguage string) *i18n.PO {
	// extract translatable strings from the tagged items
	pot := i18n.NewPO(i18n.NewPOHeader("Generated by goflow docgen", dates.Now(), srcLanguage))
	for _, g := range generators {
		for _, msgID := range g.ExtractText(items) {
			pot.AddEntry(&i18n.POEntry{MsgID: msgID})
		}
	}
	pot.Sort()
	return pot
}

// Generate generates all documentation outputs
func Generate(baseDir, outputDir, localesDir string) error {
	fmt.Println("Processing sources...")

	// extract all documented items from the source code
	taggedItems, err := FindAllTaggedItems(baseDir)
	if err != nil {
		return errors.Wrap(err, "error extracting tagged items")
	}

	for k, v := range taggedItems {
		fmt.Printf(" > Found %d tagged items with tag %s\n", len(v), k)
	}

	// extract translatable strings from the tagged items
	pot := ExtractPOT(taggedItems, srcLanguage)

	locales := i18n.NewLibrary(localesDir, srcLanguage)
	locales.Update(poDomain, pot)
	if err != nil {
		return errors.Wrap(err, "error updating locale files")
	}

	// generate docs in each supported language
	for _, language := range locales.Languages() {
		fmt.Printf("Generating docs in '%s'\n", language)

		po, err := locales.Load(language, poDomain)
		if err != nil {
			return errors.Wrapf(err, "error loading PO file for '%s'", language)
		}

		genDir := path.Join(outputDir, language)
		os.MkdirAll(genDir, 0777)

		if err := generateForLang(baseDir, genDir, taggedItems, po); err != nil {
			return err
		}
	}

	return nil
}

// generates all documentation a given language by invoking all generators
func generateForLang(baseDir, outputDir string, items map[string][]*TaggedItem, po *i18n.PO) error {
	for _, g := range generators {
		fmt.Printf("Invoking generator: %s...\n", g.Name())

		if err := g.Generate(baseDir, outputDir, items, po); err != nil {
			return errors.Wrapf(err, "error invoking generator %s", g.Name())
		}
	}
	return nil
}
